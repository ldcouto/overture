["state invariant initialized obligation:((len []) \u003c\u003d 5)","state invariant satisfiable obligation:(exists vehicles:seq of (Vehicle) \u0026 ((len vehicles) \u003c\u003d 5))","state invariant holds obligation:(forall vehicle:Vehicle \u0026 ((vehicle not in set (elems vehicles)) \u003d\u003e (((len vehicles) \u003c\u003d 5) \u003d\u003e ((len (vehicles ^ [vehicle])) \u003c\u003d 5))))","state invariant holds obligation:(forall vehicle:Vehicle \u0026 ((vehicle not in set (elems vehicles)) \u003d\u003e (((len (vehicles ^ [vehicle])) \u003c\u003d 5) \u003d\u003e ((len ((tl (vehicles ^ [vehicle])) ^ [vehicle])) \u003c\u003d 5))))","non-empty sequence obligation:(forall vehicle:Vehicle \u0026 ((vehicle not in set (elems vehicles)) \u003d\u003e ((vehicles ^ [vehicle]) \u003c\u003e [])))","state invariant holds obligation:(((len vehicles) \u003c\u003d 5) \u003d\u003e ((len vehicles) \u003c\u003d 5))","state invariant holds obligation:(forall vs:set of (Vehicle) \u0026 (((card vs) \u003c\u003e 0) \u003d\u003e (((len vehicles) \u003c\u003d 5) \u003d\u003e ((len vehicles) \u003c\u003d 5))))","non-zero obligation:(forall vs:set of (Vehicle) \u0026 (((card vs) \u003c\u003e 0) \u003d\u003e ((card vs) \u003c\u003e 0)))","type compatibility obligation:(forall vs:set of (Vehicle) \u0026 (((card vs) \u003c\u003e 0) \u003d\u003e is_(RESULT, nat)))","legal sequence application obligation:(1 in set (inds vs))","legal sequence application obligation:(2 in set (inds vs))","legal sequence application obligation:(1 in set (inds vs))","legal sequence application obligation:(2 in set (inds vs))","legal sequence application obligation:(3 in set (inds vs))","cases exhaustive obligation:(forall d:Direction \u0026 ((((d \u003d \u003cNORTH\u003e) or (d \u003d \u003cSOUTH\u003e)) or (d \u003d \u003cEAST\u003e)) or (d \u003d \u003cWEST\u003e)))","legal sequence application obligation:(1 in set (inds vs))","cases exhaustive obligation:(forall d:Direction \u0026 ((((d \u003d \u003cNORTH\u003e) or (d \u003d \u003cSOUTH\u003e)) or (d \u003d \u003cEAST\u003e)) or (d \u003d \u003cWEST\u003e)))","cases exhaustive obligation:(forall i:Indicator \u0026 (((i \u003d \u003cLEFT\u003e) or (i \u003d \u003cRIGHT\u003e)) or (i \u003d \u003cNONE\u003e)))","cases exhaustive obligation:(forall m:MessageType \u0026 ((((m \u003d \u003cLowGrip\u003e) or (m \u003d \u003cCongestion\u003e)) or (m \u003d \u003cLeftTurn\u003e)) or (m \u003d \u003cRedLight\u003e)))","legal function application obligation:(forall filename:seq of (char) \u0026 (forall echo1:bool \u0026 (true \u003d\u003e pre_(((io.freadval))[InputTP]filename))))","type compatibility obligation:(forall filename:seq of (char) \u0026 (forall echo1:bool \u0026 (true \u003d\u003e is_(input, seq of (inline)))))","while loop termination obligation:...","non-empty sequence obligation:(inlines \u003c\u003e [])","non-empty sequence obligation:(forall echo2:bool \u0026 (true \u003d\u003e (forall echo3:bool \u0026 (true \u003d\u003e (forall echo6:bool \u0026 (true \u003d\u003e (forall echo8:bool \u0026 (true \u003d\u003e (forall echo10:bool \u0026 (true \u003d\u003e (forall echo12:bool \u0026 (true \u003d\u003e (forall echo14:bool \u0026 (true \u003d\u003e (forall echo15:bool \u0026 (true \u003d\u003e (forall echo16:bool \u0026 (true \u003d\u003e (inlines \u003c\u003e [])))))))))))))))))))","state invariant initialized obligation:(((((dom {|-\u003e}) inter (dom {|-\u003e})) \u003d {}) and (forall id in set (dom ctrlUnits) \u0026 ((ctrlUnits(id).GetVehicleID)() \u003d id))) and (forall id in set (dom lights) \u0026 ((lights(id).GetID)() \u003d id)))","state invariant satisfiable obligation:(exists ctrlUnits:inmap (nat) to (Controller), lights:inmap (nat) to (TrafficLight) \u0026 (((dom ctrlUnits) inter (dom lights)) \u003d {}))","state invariant initialized obligation:(((((dom {|-\u003e}) inter (dom {|-\u003e})) \u003d {}) and (forall id in set (dom ctrlUnits) \u0026 ((ctrlUnits(id).GetVehicleID)() \u003d id))) and (forall id in set (dom lights) \u0026 ((lights(id).GetID)() \u003d id)))","state invariant satisfiable obligation:(exists ctrlUnits:inmap (nat) to (Controller), lights:inmap (nat) to (TrafficLight) \u0026 (forall id in set (dom ctrlUnits) \u0026 ((ctrlUnits(id).GetVehicleID)() \u003d id)))","state invariant initialized obligation:(((((dom {|-\u003e}) inter (dom {|-\u003e})) \u003d {}) and (forall id in set (dom ctrlUnits) \u0026 ((ctrlUnits(id).GetVehicleID)() \u003d id))) and (forall id in set (dom lights) \u0026 ((lights(id).GetID)() \u003d id)))","state invariant satisfiable obligation:(exists ctrlUnits:inmap (nat) to (Controller), lights:inmap (nat) to (TrafficLight) \u0026 (forall id in set (dom lights) \u0026 ((lights(id).GetID)() \u003d id)))","state invariant holds obligation:(forall ctrl:Controller \u0026 (((ctrl.GetVehicleID)() not in set ((dom ctrlUnits) union (dom lights))) \u003d\u003e ((((((dom ctrlUnits) inter (dom lights)) \u003d {}) and (forall id in set (dom ctrlUnits) \u0026 ((ctrlUnits(id).GetVehicleID)() \u003d id))) and (forall id in set (dom lights) \u0026 ((lights(id).GetID)() \u003d id))) \u003d\u003e (((((dom (ctrlUnits munion {(ctrl.GetVehicleID)() |-\u003e ctrl})) inter (dom lights)) \u003d {}) and (forall id in set (dom ctrlUnits) \u0026 ((ctrlUnits(id).GetVehicleID)() \u003d id))) and (forall id in set (dom lights) \u0026 ((lights(id).GetID)() \u003d id))))))","map compatible obligation:(forall ctrl:Controller \u0026 (((ctrl.GetVehicleID)() not in set ((dom ctrlUnits) union (dom lights))) \u003d\u003e (forall ldom1 in set (dom ctrlUnits), rdom2 in set (dom {(ctrl.GetVehicleID)() |-\u003e ctrl}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (ctrlUnits(ldom1) \u003d {(ctrl.GetVehicleID)() |-\u003e ctrl}(rdom2))))))","type compatibility obligation:(forall ctrl:Controller \u0026 (((ctrl.GetVehicleID)() not in set ((dom ctrlUnits) union (dom lights))) \u003d\u003e is_((ctrlUnits munion {(ctrl.GetVehicleID)() |-\u003e ctrl}), inmap (nat) to (Controller))))","state invariant holds obligation:(forall light:TrafficLight \u0026 ((((light.GetID)() not in set (dom lights)) and ((light.GetID)() not in set (dom ctrlUnits))) \u003d\u003e ((((((dom ctrlUnits) inter (dom lights)) \u003d {}) and (forall id in set (dom ctrlUnits) \u0026 ((ctrlUnits(id).GetVehicleID)() \u003d id))) and (forall id in set (dom lights) \u0026 ((lights(id).GetID)() \u003d id))) \u003d\u003e (((((dom ctrlUnits) inter (dom (lights munion {(light.GetID)() |-\u003e light}))) \u003d {}) and (forall id in set (dom ctrlUnits) \u0026 ((ctrlUnits(id).GetVehicleID)() \u003d id))) and (forall id in set (dom lights) \u0026 ((lights(id).GetID)() \u003d id))))))","map compatible obligation:(forall light:TrafficLight \u0026 ((((light.GetID)() not in set (dom lights)) and ((light.GetID)() not in set (dom ctrlUnits))) \u003d\u003e (forall ldom1 in set (dom lights), rdom2 in set (dom {(light.GetID)() |-\u003e light}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (lights(ldom1) \u003d {(light.GetID)() |-\u003e light}(rdom2))))))","type compatibility obligation:(forall light:TrafficLight \u0026 ((((light.GetID)() not in set (dom lights)) and ((light.GetID)() not in set (dom ctrlUnits))) \u003d\u003e is_((lights munion {(light.GetID)() |-\u003e light}), inmap (nat) to (TrafficLight))))","legal map application obligation:(forall id:nat \u0026 ((id in set (dom ctrlUnits)) \u003d\u003e (id in set (dom ctrlUnits))))","legal map application obligation:(forall id:nat \u0026 ((id in set (dom lights)) \u003d\u003e (id in set (dom lights))))","cases exhaustive obligation:(forall d:Direction \u0026 ((((d \u003d \u003cNORTH\u003e) or (d \u003d \u003cSOUTH\u003e)) or (d \u003d \u003cEAST\u003e)) or (d \u003d \u003cWEST\u003e)))","state invariant holds obligation:(forall vehicle:Vehicle \u0026 ((((len internalTrafficData) \u003c\u003d Config`TrafficDataKeeptNumber) and ((len externalTrafficData) \u003c\u003d Config`TrafficDataKeeptNumber)) and ((len communicatedWith) \u003c\u003d Config`TrafficDataKeeptNumber)))","state invariant holds obligation:(forall vdmUnitID:nat, data:seq of (TrafficData) \u0026 (((((len internalTrafficData) \u003c\u003d Config`TrafficDataKeeptNumber) and ((len externalTrafficData) \u003c\u003d Config`TrafficDataKeeptNumber)) and ((len communicatedWith) \u003c\u003d Config`TrafficDataKeeptNumber)) \u003d\u003e ((((len internalTrafficData) \u003c\u003d Config`TrafficDataKeeptNumber) and ((len (externalTrafficData ^ data)) \u003c\u003d Config`TrafficDataKeeptNumber)) and ((len communicatedWith) \u003c\u003d Config`TrafficDataKeeptNumber))))","state invariant holds obligation:(forall vdmUnitID:nat, data:seq of (TrafficData) \u0026 (((((len internalTrafficData) \u003c\u003d Config`TrafficDataKeeptNumber) and ((len (externalTrafficData ^ data)) \u003c\u003d Config`TrafficDataKeeptNumber)) and ((len communicatedWith) \u003c\u003d Config`TrafficDataKeeptNumber)) \u003d\u003e ((((len internalTrafficData) \u003c\u003d Config`TrafficDataKeeptNumber) and ((len ((tl (externalTrafficData ^ data)) ^ data)) \u003c\u003d Config`TrafficDataKeeptNumber)) and ((len communicatedWith) \u003c\u003d Config`TrafficDataKeeptNumber))))","non-empty sequence obligation:(forall vdmUnitID:nat, data:seq of (TrafficData) \u0026 ((externalTrafficData ^ data) \u003c\u003e []))","state invariant holds obligation:(forall vdmUnitID:nat, data:seq of (TrafficData) \u0026 (((((len internalTrafficData) \u003c\u003d Config`TrafficDataKeeptNumber) and ((len ((tl (externalTrafficData ^ data)) ^ data)) \u003c\u003d Config`TrafficDataKeeptNumber)) and ((len communicatedWith) \u003c\u003d Config`TrafficDataKeeptNumber)) \u003d\u003e ((((len internalTrafficData) \u003c\u003d Config`TrafficDataKeeptNumber) and ((len ((tl (externalTrafficData ^ data)) ^ data)) \u003c\u003d Config`TrafficDataKeeptNumber)) and ((len (communicatedWith ^ [vdmUnitID])) \u003c\u003d Config`TrafficDataKeeptNumber))))","state invariant holds obligation:(forall vdmUnitID:nat, data:seq of (TrafficData) \u0026 (((((len internalTrafficData) \u003c\u003d Config`TrafficDataKeeptNumber) and ((len ((tl (externalTrafficData ^ data)) ^ data)) \u003c\u003d Config`TrafficDataKeeptNumber)) and ((len (communicatedWith ^ [vdmUnitID])) \u003c\u003d Config`TrafficDataKeeptNumber)) \u003d\u003e ((((len internalTrafficData) \u003c\u003d Config`TrafficDataKeeptNumber) and ((len ((tl (externalTrafficData ^ data)) ^ data)) \u003c\u003d Config`TrafficDataKeeptNumber)) and ((len ((tl (communicatedWith ^ [vdmUnitID])) ^ [vdmUnitID])) \u003c\u003d Config`TrafficDataKeeptNumber))))","non-empty sequence obligation:(forall vdmUnitID:nat, data:seq of (TrafficData) \u0026 (communicatedWith \u003c\u003e []))","state invariant holds obligation:(forall data:TrafficData \u0026 (((((len internalTrafficData) \u003c\u003d Config`TrafficDataKeeptNumber) and ((len externalTrafficData) \u003c\u003d Config`TrafficDataKeeptNumber)) and ((len communicatedWith) \u003c\u003d Config`TrafficDataKeeptNumber)) \u003d\u003e ((((len (internalTrafficData ^ [data])) \u003c\u003d Config`TrafficDataKeeptNumber) and ((len externalTrafficData) \u003c\u003d Config`TrafficDataKeeptNumber)) and ((len communicatedWith) \u003c\u003d Config`TrafficDataKeeptNumber))))","state invariant holds obligation:(forall data:TrafficData \u0026 (((((len (internalTrafficData ^ [data])) \u003c\u003d Config`TrafficDataKeeptNumber) and ((len externalTrafficData) \u003c\u003d Config`TrafficDataKeeptNumber)) and ((len communicatedWith) \u003c\u003d Config`TrafficDataKeeptNumber)) \u003d\u003e ((((len ((tl (internalTrafficData ^ [data])) ^ [data])) \u003c\u003d Config`TrafficDataKeeptNumber) and ((len externalTrafficData) \u003c\u003d Config`TrafficDataKeeptNumber)) and ((len communicatedWith) \u003c\u003d Config`TrafficDataKeeptNumber))))","non-empty sequence obligation:(forall data:TrafficData \u0026 ((internalTrafficData ^ [data]) \u003c\u003e []))","legal sequence application obligation:(forall i in set (inds internalTrafficData) \u0026 (i in set (inds internalTrafficData)))","legal sequence application obligation:(forall i in set (inds internalTrafficData) \u0026 (i in set (inds internalTrafficData)))","legal sequence application obligation:(forall i in set (inds internalTrafficData) \u0026 (i in set (inds internalTrafficData)))","state invariant holds obligation:(((((len internalTrafficData) \u003c\u003d Config`TrafficDataKeeptNumber) and ((len externalTrafficData) \u003c\u003d Config`TrafficDataKeeptNumber)) and ((len communicatedWith) \u003c\u003d Config`TrafficDataKeeptNumber)) \u003d\u003e ((((len [internalTrafficData(i) | i in set (inds internalTrafficData) \u0026 (internalTrafficData(i) \u003c\u003e td)]) \u003c\u003d Config`TrafficDataKeeptNumber) and ((len externalTrafficData) \u003c\u003d Config`TrafficDataKeeptNumber)) and ((len communicatedWith) \u003c\u003d Config`TrafficDataKeeptNumber)))","legal sequence application obligation:(forall i in set (inds internalTrafficData) \u0026 ((internalTrafficData(i) \u003c\u003e td) \u003d\u003e (i in set (inds internalTrafficData))))","legal sequence application obligation:(forall i in set (inds internalTrafficData) \u0026 (i in set (inds internalTrafficData)))","legal sequence application obligation:(1 in set (inds vs))","operation call obligation:(forall text:seq of (char) \u0026 ((\"\" \u003d \"\") \u003c\u003d\u003e (\"\" \u003d nil)))"]