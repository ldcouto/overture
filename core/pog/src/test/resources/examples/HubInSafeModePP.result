["type compatibility obligation:inv_WindSpeedType(15)","type compatibility obligation:inv_WindSpeedType(14)","type compatibility obligation:inv_WindSpeedType(15)","type compatibility obligation:inv_WindSpeedType(15)","type compatibility obligation:inv_WindSpeedType(16)","type compatibility obligation:((mAlarm - 1) \u003e\u003d 0)","state invariant holds obligation:(forall eStopSeq:seq of (bool), mainShaftController:MainShaftController \u0026 (forall mHubController1:[HubController], mEnterHubInSafeMode2:bool \u0026 (true \u003d\u003e Mode`HubInSafeModeInv(mMode, (mMainShaftController.GetRPM)(), (mMainShaftController.IsLocked)(), (mHub.IsOpen)()))))","state invariant holds obligation:(forall mode:Mode \u0026 ((Mode`StateChangeInv(mMode, mode) and Mode`HubInSafeModeInv(mode, (mMainShaftController.GetRPM)(), (mMainShaftController.IsLocked)(), (mHub.IsOpen)())) \u003d\u003e (Mode`HubInSafeModeInv(mMode, (mMainShaftController.GetRPM)(), (mMainShaftController.IsLocked)(), (mHub.IsOpen)()) \u003d\u003e Mode`HubInSafeModeInv(mMode, (mMainShaftController.GetRPM)(), (mMainShaftController.IsLocked)(), (mHub.IsOpen)()))))","non-empty sequence obligation:(mEStopSeq \u003c\u003e [])","state invariant holds obligation:(Mode`HubInSafeModeInv(mMode, (mMainShaftController.GetRPM)(), (mMainShaftController.IsLocked)(), (mHub.IsOpen)()) \u003d\u003e Mode`HubInSafeModeInv(mMode, (mMainShaftController.GetRPM)(), (mMainShaftController.IsLocked)(), (mHub.IsOpen)()))","non-empty sequence obligation:(mEStopSeq \u003c\u003e [])","non-empty sequence obligation:(mCmdSeq \u003c\u003e [])","non-empty sequence obligation:(mCmdSeq \u003c\u003e [])","type invariant satisfiable obligation:(exists w:WindSpeedType \u0026 (w \u003c\u003d 50))","type compatibility obligation:inv_WindSpeedType(50)","type compatibility obligation:((mInstance \u003c\u003e nil) \u003d\u003e is_(RESULT, WindMeasurementController))","non-empty sequence obligation:((mWindSpeedSeq \u003c\u003e []) \u003d\u003e (mWindSpeedSeq \u003c\u003e []))","non-empty sequence obligation:(mWindSpeedSeq \u003c\u003e [])","legal sequence application obligation:(forall testData:seq of (TestData) \u0026 (forall i in set (inds testData) \u0026 (i in set (inds testData))))","legal sequence application obligation:(forall testData:seq of (TestData) \u0026 (forall mWindSpeedSeq1:seq of (WindSpeedType), mInstance2:[WindMeasurementController] \u0026 (true \u003d\u003e (forall i in set (inds testData) \u0026 (i in set (inds testData))))))","legal sequence application obligation:(forall testData:seq of (TestData) \u0026 (forall mWindSpeedSeq1:seq of (WindSpeedType), mInstance2:[WindMeasurementController] \u0026 (true \u003d\u003e (forall i in set (inds testData) \u0026 (i in set (inds testData))))))","while loop termination obligation:...","type compatibility obligation:inv_RPMType(1)","type compatibility obligation:inv_RPMType((WindMeasurementController`MAX_WIND * 10))","type invariant satisfiable obligation:(exists rpm:RPMType \u0026 (rpm \u003c\u003d (WindMeasurementController`MAX_WIND * 10)))","type compatibility obligation:inv_RPMType(0)","legal sequence application obligation:(forall brakeSeq:seq of (Brake) \u0026 (forall i in set (inds brakeSeq) \u0026 ((i \u003e 1) \u003d\u003e ((i - 1) in set (inds brakeSeq)))))","legal sequence application obligation:(forall brakeSeq:seq of (Brake) \u0026 (forall i in set (inds brakeSeq) \u0026 ((i \u003e 1) \u003d\u003e (i in set (inds brakeSeq)))))","operation call obligation:BrakeSeqInv((mBrakeSeq ^ [brake]))","operation call obligation:(forall mIsLocked1:bool, mBrakeSeq2:seq of (Brake), mRPM3:RPMType, mIsBrakeApplied4:bool \u0026 (BrakeSeqInv(mBrakeSeq) \u003d\u003e BrakeSeqInv((mBrakeSeq ^ [brake]))))","operation call obligation:(forall mIsLocked1:bool, mBrakeSeq2:seq of (Brake), mRPM3:RPMType, mIsBrakeApplied4:bool \u0026 (BrakeSeqInv(mBrakeSeq) \u003d\u003e (forall mIsLocked5:bool, mBrakeSeq6:seq of (Brake), mRPM7:RPMType, mIsBrakeApplied8:bool \u0026 (BrakeSeqInv(mBrakeSeq) \u003d\u003e BrakeSeqInv((mBrakeSeq ^ [brake]))))))","operation call obligation:(forall mIsLocked1:bool, mBrakeSeq2:seq of (Brake), mRPM3:RPMType, mIsBrakeApplied4:bool \u0026 (BrakeSeqInv(mBrakeSeq) \u003d\u003e (forall mIsLocked5:bool, mBrakeSeq6:seq of (Brake), mRPM7:RPMType, mIsBrakeApplied8:bool \u0026 (BrakeSeqInv(mBrakeSeq) \u003d\u003e (forall mIsLocked9:bool, mBrakeSeq10:seq of (Brake), mRPM11:RPMType, mIsBrakeApplied12:bool \u0026 (BrakeSeqInv(mBrakeSeq) \u003d\u003e BrakeSeqInv((mBrakeSeq ^ [brake]))))))))","state invariant holds obligation:(forall mIsLocked1:bool, mBrakeSeq2:seq of (Brake), mRPM3:RPMType, mIsBrakeApplied4:bool \u0026 (BrakeSeqInv(mBrakeSeq) \u003d\u003e (forall mIsLocked5:bool, mBrakeSeq6:seq of (Brake), mRPM7:RPMType, mIsBrakeApplied8:bool \u0026 (BrakeSeqInv(mBrakeSeq) \u003d\u003e (forall mIsLocked9:bool, mBrakeSeq10:seq of (Brake), mRPM11:RPMType, mIsBrakeApplied12:bool \u0026 (BrakeSeqInv(mBrakeSeq) \u003d\u003e (forall mIsLocked13:bool, mBrakeSeq14:seq of (Brake), mRPM15:RPMType, mIsBrakeApplied16:bool \u0026 (BrakeSeqInv(mBrakeSeq) \u003d\u003e BrakeSeqInv(mBrakeSeq)))))))))","state invariant holds obligation:(((not IsLocked()) and ((GetRPM() \u003d 0) and IsBrakeApplied())) \u003d\u003e (BrakeSeqInv(mBrakeSeq) \u003d\u003e BrakeSeqInv(mBrakeSeq)))","state invariant holds obligation:((IsLocked() and ((GetRPM() \u003d 0) and IsBrakeApplied())) \u003d\u003e (BrakeSeqInv(mBrakeSeq) \u003d\u003e BrakeSeqInv(mBrakeSeq)))","state invariant holds obligation:(forall brake:Brake \u0026 (BrakeSeqInv((mBrakeSeq ^ [brake])) \u003d\u003e (BrakeSeqInv(mBrakeSeq) \u003d\u003e BrakeSeqInv(mBrakeSeq))))","legal sequence application obligation:(forall brake:Brake \u0026 (((exists i in set (inds mBrakeSeq) \u0026 (mBrakeSeq(i).IsEqual)(brake)) and BrakeSeqInv([mBrakeSeq(i) | i in set (inds mBrakeSeq) \u0026 (not (mBrakeSeq(i).IsEqual)(brake))])) \u003d\u003e (forall i in set (inds mBrakeSeq) \u0026 (i in set (inds mBrakeSeq)))))","legal sequence application obligation:(forall brake:Brake \u0026 (((exists i in set (inds mBrakeSeq) \u0026 (mBrakeSeq(i).IsEqual)(brake)) and BrakeSeqInv([mBrakeSeq(i) | i in set (inds mBrakeSeq) \u0026 (not (mBrakeSeq(i).IsEqual)(brake))])) \u003d\u003e ((exists i in set (inds mBrakeSeq) \u0026 (mBrakeSeq(i).IsEqual)(brake)) \u003d\u003e (forall i in set (inds mBrakeSeq) \u0026 ((not (mBrakeSeq(i).IsEqual)(brake)) \u003d\u003e (i in set (inds mBrakeSeq)))))))","legal sequence application obligation:(forall brake:Brake \u0026 (((exists i in set (inds mBrakeSeq) \u0026 (mBrakeSeq(i).IsEqual)(brake)) and BrakeSeqInv([mBrakeSeq(i) | i in set (inds mBrakeSeq) \u0026 (not (mBrakeSeq(i).IsEqual)(brake))])) \u003d\u003e ((exists i in set (inds mBrakeSeq) \u0026 (mBrakeSeq(i).IsEqual)(brake)) \u003d\u003e (forall i in set (inds mBrakeSeq) \u0026 (i in set (inds mBrakeSeq))))))","state invariant holds obligation:(forall brake:Brake \u0026 (((exists i in set (inds mBrakeSeq) \u0026 (mBrakeSeq(i).IsEqual)(brake)) and BrakeSeqInv([mBrakeSeq(i) | i in set (inds mBrakeSeq) \u0026 (not (mBrakeSeq(i).IsEqual)(brake))])) \u003d\u003e (BrakeSeqInv(mBrakeSeq) \u003d\u003e BrakeSeqInv(mBrakeSeq))))","legal sequence application obligation:(forall brake:Brake \u0026 (((exists i in set (inds mBrakeSeq) \u0026 (mBrakeSeq(i).IsEqual)(brake)) and BrakeSeqInv([mBrakeSeq(i) | i in set (inds mBrakeSeq) \u0026 (not (mBrakeSeq(i).IsEqual)(brake))])) \u003d\u003e (forall i in set (inds mBrakeSeq) \u0026 ((not (mBrakeSeq(i).IsEqual)(brake)) \u003d\u003e (i in set (inds mBrakeSeq))))))","legal sequence application obligation:(forall brake:Brake \u0026 (((exists i in set (inds mBrakeSeq) \u0026 (mBrakeSeq(i).IsEqual)(brake)) and BrakeSeqInv([mBrakeSeq(i) | i in set (inds mBrakeSeq) \u0026 (not (mBrakeSeq(i).IsEqual)(brake))])) \u003d\u003e (forall i in set (inds mBrakeSeq) \u0026 (i in set (inds mBrakeSeq)))))","state invariant holds obligation:(((len mBrakeSeq) \u003c\u003e 0) \u003d\u003e (BrakeSeqInv(mBrakeSeq) \u003d\u003e BrakeSeqInv(mBrakeSeq)))","state invariant holds obligation:(((len mBrakeSeq) \u003c\u003e 0) \u003d\u003e (BrakeSeqInv(mBrakeSeq) \u003d\u003e BrakeSeqInv(mBrakeSeq)))","state invariant holds obligation:(((len mBrakeSeq) \u003c\u003e 0) \u003d\u003e (BrakeSeqInv(mBrakeSeq) \u003d\u003e BrakeSeqInv(mBrakeSeq)))","legal sequence application obligation:(((len mBrakeSeq) \u003c\u003e 0) \u003d\u003e (i in set (inds mBrakeSeq)))","state invariant holds obligation:(((len mBrakeSeq) \u003c\u003e 0) \u003d\u003e (BrakeSeqInv(mBrakeSeq) \u003d\u003e BrakeSeqInv(mBrakeSeq)))","type compatibility obligation:(((len mBrakeSeq) \u003c\u003e 0) \u003d\u003e inv_RPMType(((WindMeasurementController`GetInstance().GetWindSpeed)() * 10)))","operation establishes postcondition obligation:(((len mBrakeSeq) \u003c\u003e 0) \u003d\u003e (((WindMeasurementController`GetInstance().GetWindSpeed)() * 10) \u003c\u003d MAX_RPM))","operation call obligation:(forall text:seq of (char) \u0026 ((\"\" \u003d \"\") \u003c\u003d\u003e (\"\" \u003d nil)))"]