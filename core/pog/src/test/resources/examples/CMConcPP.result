["legal function application obligation:(forall fname:seq of (char), tDef:[ThreadDef] \u0026 pre_(((io.freadval))[InputTP]fname))","state invariant holds obligation:(forall fname:seq of (char), tDef:[ThreadDef] \u0026 ((dom ranges) \u003d (dom sensors)))","state invariant holds obligation:(((dom ranges) \u003d (dom sensors)) \u003d\u003e ((dom (ranges munion {id |-\u003e (psens.getAperture)()})) \u003d (dom (sensors munion {id |-\u003e psens}))))","while loop termination obligation:...","non-empty sequence obligation:(inlines \u003c\u003e [])","legal map application obligation:(id in set (dom ranges))","state invariant holds obligation:(((dom ranges) \u003d (dom sensors)) \u003d\u003e ((dom ranges) \u003d (dom sensors)))","non-empty sequence obligation:(inlines \u003c\u003e [])","state invariant holds obligation:(((dom ranges) \u003d (dom sensors)) \u003d\u003e ((dom ranges) \u003d (dom sensors)))","state invariant holds obligation:(((dom ranges) \u003d (dom sensors)) \u003d\u003e ((dom ranges) \u003d (dom sensors)))","state invariant holds obligation:(((dom ranges) \u003d (dom sensors)) \u003d\u003e ((dom ranges) \u003d (dom sensors)))","state invariant holds obligation:(forall evid:EventId, pfltp:FlareType, angle:Angle, pt1:Time, pt2:Time \u0026 (((dom ranges) \u003d (dom sensors)) \u003d\u003e ((dom ranges) \u003d (dom sensors))))","legal function application obligation:pre_(((io.writeval))[seq of (outline)]outlines)","state invariant holds obligation:(forall io1:IO, inlines2:seq of (inline), outlines3:seq of (outline), ranges4:map (nat) to ((Angle * Angle)), sensors5:map (nat) to (Sensor), busy6:bool, simtime7:Time \u0026 (((dom ranges4) \u003d (dom sensors5)) \u003d\u003e (((dom ranges4) \u003d (dom sensors5)) \u003d\u003e ((dom ranges4) \u003d (dom sensors5)))))","type compatibility obligation:is_(RESULT, (Angle * Angle))","state invariant holds obligation:(forall papp:Angle, tDef:[ThreadDef] \u0026 ((dom ranges) \u003d (dom dispensers)))","state invariant holds obligation:(((dom ranges) \u003d (dom dispensers)) \u003d\u003e ((dom (ranges munion {id |-\u003e mk_(angle, DISPENSER_APERTURE)})) \u003d (dom (dispensers munion {id |-\u003e pfldisp}))))","type compatibility obligation:is_(RESULT, (Angle * Angle))","state invariant holds obligation:(forall evid:EventId, pmt:MissileType, pa:Angle, pt:Time \u0026 (((dom ranges) \u003d (dom dispensers)) \u003d\u003e ((dom ranges) \u003d (dom dispensers))))","state invariant holds obligation:(forall evid:EventId, pmt:MissileType, pa:Angle, pt:Time \u0026 (((dom ranges) \u003d (dom dispensers)) \u003d\u003e ((dom ranges) \u003d (dom dispensers))))","non-empty sequence obligation:(threats \u003c\u003e [])","state invariant holds obligation:(((dom ranges) \u003d (dom dispensers)) \u003d\u003e ((dom ranges) \u003d (dom dispensers)))","non-empty sequence obligation:(threats \u003c\u003e [])","legal map application obligation:(id in set (dom ranges))","state invariant holds obligation:(((dom ranges) \u003d (dom dispensers)) \u003d\u003e ((dom ranges) \u003d (dom dispensers)))","enumeration map injectivity obligation:(forall m1, m2 in set {{\u003cMissileA\u003e |-\u003e [mk_(\u003cFlareOneA\u003e, 900), mk_(\u003cFlareTwoA\u003e, 500), mk_(\u003cDoNothingA\u003e, 100), mk_(\u003cFlareOneA\u003e, 500)]}, {\u003cMissileB\u003e |-\u003e [mk_(\u003cFlareTwoB\u003e, 500), mk_(\u003cFlareTwoB\u003e, 700)]}, {\u003cMissileC\u003e |-\u003e [mk_(\u003cFlareOneC\u003e, 400), mk_(\u003cDoNothingC\u003e, 100), mk_(\u003cFlareTwoC\u003e, 400), mk_(\u003cFlareOneC\u003e, 500)]}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","enumeration map injectivity obligation:(forall m1, m2 in set {{\u003cNone\u003e |-\u003e 0}, {\u003cMissileA\u003e |-\u003e 1}, {\u003cMissileB\u003e |-\u003e 2}, {\u003cMissileC\u003e |-\u003e 3}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","legal map application obligation:(forall evid:EventId, pmt:MissileType, ptime:Time \u0026 (((pmt in set (dom missilePriority)) and (pmt in set (dom responseDB))) \u003d\u003e (pmt in set (dom missilePriority))))","legal map application obligation:(forall evid:EventId, pmt:MissileType, ptime:Time \u0026 (((pmt in set (dom missilePriority)) and (pmt in set (dom responseDB))) \u003d\u003e (pmt in set (dom responseDB))))","non-empty sequence obligation:(forall evid:EventId, pmt:MissileType, ptime:Time \u0026 (((pmt in set (dom missilePriority)) and (pmt in set (dom responseDB))) \u003d\u003e ((newplan ^ [mk_(fltp, newtime)]) \u003c\u003e [])))","non-empty sequence obligation:(forall evid:EventId, pmt:MissileType, ptime:Time \u0026 (((pmt in set (dom missilePriority)) and (pmt in set (dom responseDB))) \u003d\u003e (forall curplan1:Plan, curprio2:nat, busy3:bool, aperture4:Angle, eventid5:[EventId] \u0026 (true \u003d\u003e (newplan \u003c\u003e [])))))","legal map application obligation:(forall evid:EventId, pmt:MissileType, ptime:Time \u0026 (((pmt in set (dom missilePriority)) and (pmt in set (dom responseDB))) \u003d\u003e (forall curplan1:Plan, curprio2:nat, busy3:bool, aperture4:Angle, eventid5:[EventId] \u0026 (true \u003d\u003e (pmt in set (dom missilePriority))))))","while loop termination obligation:...","non-empty sequence obligation:(curplan \u003c\u003e [])","non-empty sequence obligation:(curplan \u003c\u003e [])","type invariant satisfiable obligation:(exists num:Angle \u0026 (num \u003c 360))","type compatibility obligation:(forall t:BaseThread \u0026 ((barrierCount - 1) \u003e\u003d 0))","while loop termination obligation:...","legal map application obligation:(forall th in set (dom wakeUpMap) \u0026 (th in set (dom wakeUpMap)))","legal map application obligation:(forall th in set (dom wakeUpMap) \u0026 ((wakeUpMap(th) \u003c\u003e nil) \u003d\u003e (th in set (dom wakeUpMap))))","operation establishes postcondition obligation:(forall x in set (rng wakeUpMap) \u0026 ((x \u003d nil) or (x \u003e\u003d currentTime)))","state invariant holds obligation:(forall tDef:[ThreadDef] \u0026 ((dom ranges) \u003d (dom controllers)))","state invariant holds obligation:(((dom ranges) \u003d (dom controllers)) \u003d\u003e ((dom (ranges munion {nid |-\u003e (pctrl.getAperture)()})) \u003d (dom (controllers munion {nid |-\u003e pctrl}))))","state invariant holds obligation:(forall evid:EventId, pmt:MissileType, pa:Angle, pt:Time \u0026 (((dom ranges) \u003d (dom controllers)) \u003d\u003e ((dom ranges) \u003d (dom controllers))))","state invariant holds obligation:(forall evid:EventId, pmt:MissileType, pa:Angle, pt:Time \u0026 (((dom ranges) \u003d (dom controllers)) \u003d\u003e ((dom ranges) \u003d (dom controllers))))","non-empty sequence obligation:(threats \u003c\u003e [])","state invariant holds obligation:(((dom ranges) \u003d (dom controllers)) \u003d\u003e ((dom ranges) \u003d (dom controllers)))","non-empty sequence obligation:(threats \u003c\u003e [])","legal map application obligation:(id in set (dom ranges))","state invariant holds obligation:(((dom ranges) \u003d (dom controllers)) \u003d\u003e ((dom ranges) \u003d (dom controllers)))","operation call obligation:(forall text:seq of (char) \u0026 ((\"\" \u003d \"\") \u003c\u003d\u003e (\"\" \u003d nil)))"]