["state invariant holds obligation:(forall destination:Busstop \u0026 (((destination.IsStop)() \u003d true) \u003d\u003e ((goal.IsStop)() \u003d true)))","state invariant holds obligation:(((goal.IsStop)() \u003d true) \u003d\u003e ((goal.IsStop)() \u003d true))","state invariant holds obligation:(((goal.IsStop)() \u003d true) \u003d\u003e ((goal.IsStop)() \u003d true))","state invariant holds obligation:(((goal.IsStop)() \u003d true) \u003d\u003e ((goal.IsStop)() \u003d true))","non-zero obligation:(forall roadnumber:RoadNumber, waypoints:set of (Waypoint), length:nat \u0026 (((card waypoints) \u003e 1) \u003d\u003e (Config`DefaultRoadSpeedLimit \u003c\u003e 0)))","type compatibility obligation:(forall roadnumber:RoadNumber, waypoints:set of (Waypoint), length:nat \u0026 (((card waypoints) \u003e 1) \u003d\u003e ((floor (length / Config`DefaultRoadSpeedLimit)) \u003e\u003d 0)))","state invariant holds obligation:(forall roadnumber:RoadNumber, waypoints:set of (Waypoint), length:nat \u0026 (((card waypoints) \u003e 1) \u003d\u003e ((card waypoints) \u003e 1)))","non-zero obligation:(forall roadnumber:RoadNumber, waypoints:set of (Waypoint), length:nat, limit:nat \u0026 (((card waypoints) \u003e 1) \u003d\u003e (limit \u003c\u003e 0)))","type compatibility obligation:(forall roadnumber:RoadNumber, waypoints:set of (Waypoint), length:nat, limit:nat \u0026 (((card waypoints) \u003e 1) \u003d\u003e ((floor (length / limit)) \u003e\u003d 0)))","state invariant holds obligation:(forall roadnumber:RoadNumber, waypoints:set of (Waypoint), length:nat, limit:nat \u0026 (((card waypoints) \u003e 1) \u003d\u003e ((card waypoints) \u003e 1)))","let be st existence obligation:(forall wp:Waypoint \u0026 ((wp in set wps) \u003d\u003e (exists opposite in set (wps \\ {wp}) \u0026 true)))","cases exhaustive obligation:(forall busstop:seq of (char) \u0026 (((((((busstop \u003d \"A\") or (busstop \u003d \"B\")) or (busstop \u003d \"C\")) or (busstop \u003d \"D\")) or (busstop \u003d \"E\")) or (busstop \u003d \"F\")) or (busstop \u003d \"Central\")))","non-empty sequence obligation:(forall linenumber:nat, busroute:seq of (Road), waypoints:seq of (Waypoint) \u0026 ((((len waypoints) \u003e 1) and (waypoints \u003c\u003e [])) \u003d\u003e (waypoints \u003c\u003e [])))","state invariant holds obligation:(forall linenumber:nat, busroute:seq of (Road), waypoints:seq of (Waypoint) \u0026 ((((len waypoints) \u003e 1) and (waypoints \u003c\u003e [])) \u003d\u003e ((card {}) \u003c\u003d Config`BusCapacity)))","state invariant holds obligation:(forall ps:set of (Passenger) \u0026 ((((card seats) + (card ps)) \u003c\u003d Config`BusCapacity) \u003d\u003e (((card seats) \u003c\u003d Config`BusCapacity) \u003d\u003e ((card (seats union ps)) \u003c\u003d Config`BusCapacity))))","state invariant holds obligation:(forall p:set of (Passenger) \u0026 (((p inter seats) \u003c\u003e {}) \u003d\u003e (((card seats) \u003c\u003d Config`BusCapacity) \u003d\u003e ((card (seats \\ p)) \u003c\u003d Config`BusCapacity))))","legal sequence application obligation:(forall i in set (inds wps) \u0026 ((wps(i).IsStop)() \u003d\u003e (i in set (inds wps))))","legal sequence application obligation:(forall i in set (inds wps) \u0026 (i in set (inds wps)))","type compatibility obligation:is_(RESULT, seq of (Busstop))","state invariant holds obligation:(((card seats) \u003c\u003d Config`BusCapacity) \u003d\u003e ((card seats) \u003c\u003d Config`BusCapacity))","non-empty sequence obligation:(route \u003c\u003e [])","state invariant holds obligation:(((card seats) \u003c\u003d Config`BusCapacity) \u003d\u003e ((card seats) \u003c\u003d Config`BusCapacity))","non-empty sequence obligation:(route \u003c\u003e [])","state invariant holds obligation:(((card seats) \u003c\u003d Config`BusCapacity) \u003d\u003e ((card seats) \u003c\u003d Config`BusCapacity))","state invariant holds obligation:(((card seats) \u003c\u003d Config`BusCapacity) \u003d\u003e ((card seats) \u003c\u003d Config`BusCapacity))","let be st existence obligation:(forall ps:set of (Passenger), limit:nat \u0026 (exists sub in set ps \u0026 true))","cases exhaustive obligation:(forall d:Direction \u0026 ((((d \u003d \u003cNORTH\u003e) or (d \u003d \u003cSOUTH\u003e)) or (d \u003d \u003cEAST\u003e)) or (d \u003d \u003cWEST\u003e)))","legal map application obligation:(forall th in set (dom wakeUpMap) \u0026 (th in set (dom wakeUpMap)))","legal map application obligation:(forall th in set (dom wakeUpMap) \u0026 (th in set (dom wakeUpMap)))","let be st existence obligation:(exists p in set waitset \u0026 true)","map compatible obligation:(forall stp:BusStops \u0026 ((stp not in set (dom stops)) \u003d\u003e (forall ldom1 in set (dom stops), rdom2 in set (dom {stp |-\u003e bs}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (stops(ldom1) \u003d {stp |-\u003e bs}(rdom2))))))","type compatibility obligation:(forall stp:BusStops \u0026 ((stp not in set (dom stops)) \u003d\u003e is_((stops munion {stp |-\u003e bs}), inmap (BusStops) to (Busstop))))","map compatible obligation:(forall stp:BusStops \u0026 ((stp not in set (dom stops)) \u003d\u003e (forall ldom1 in set (dom wayspoints), rdom2 in set (dom {stp |-\u003e bs}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (wayspoints(ldom1) \u003d {stp |-\u003e bs}(rdom2))))))","type compatibility obligation:(forall stp:BusStops \u0026 ((stp not in set (dom stops)) \u003d\u003e is_((wayspoints munion {stp |-\u003e bs}), inmap (WaypointsEnum) to (Waypoint))))","map compatible obligation:(forall stp:WaypointsEnum \u0026 ((stp not in set (dom stops)) \u003d\u003e (true \u003d\u003e (forall ldom1 in set (dom wayspoints), rdom2 in set (dom {stp |-\u003e wp}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (wayspoints(ldom1) \u003d {stp |-\u003e wp}(rdom2)))))))","type compatibility obligation:(forall stp:WaypointsEnum \u0026 ((stp not in set (dom stops)) \u003d\u003e (true \u003d\u003e is_((wayspoints munion {stp |-\u003e wp}), inmap (WaypointsEnum) to (Waypoint)))))","map compatible obligation:(forall wp1:Waypoint, wp2:Waypoint, roadNmbr:RoadNumber, length:nat \u0026 (((roadNmbr not in set (dom roads)) and ((wp1 \u003c\u003e wp2) and (forall r in set (rng roads) \u0026 (not (r.Covers)({wp1, wp2}))))) \u003d\u003e (forall ldom1 in set (dom roads), rdom2 in set (dom {roadNmbr |-\u003e r}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (roads(ldom1) \u003d {roadNmbr |-\u003e r}(rdom2))))))","type compatibility obligation:(forall wp1:Waypoint, wp2:Waypoint, roadNmbr:RoadNumber, length:nat \u0026 (((roadNmbr not in set (dom roads)) and ((wp1 \u003c\u003e wp2) and (forall r in set (rng roads) \u0026 (not (r.Covers)({wp1, wp2}))))) \u003d\u003e is_((roads munion {roadNmbr |-\u003e r}), inmap (RoadNumber) to (Road))))","legal map application obligation:(forall wp1:WaypointsEnum, wp2:WaypointsEnum, roadNmbr:RoadNumber, length:nat, highspeed:bool \u0026 (wp1 in set (dom wayspoints)))","legal map application obligation:(forall wp1:WaypointsEnum, wp2:WaypointsEnum, roadNmbr:RoadNumber, length:nat, highspeed:bool \u0026 (wp2 in set (dom wayspoints)))","operation call obligation:(forall wp1:WaypointsEnum, wp2:WaypointsEnum, roadNmbr:RoadNumber, length:nat, highspeed:bool \u0026 ((wayspoints(wp1) not in set (dom roads)) and (forall r in set (rng roads) \u0026 ((not (r.Covers)({wp1, wp2})) and (wp1 \u003c\u003e wp2)))))","legal map application obligation:(forall wp1:WaypointsEnum, wp2:WaypointsEnum, roadNmbr:RoadNumber, length:nat, highspeed:bool \u0026 (forall wayspoints1:inmap (WaypointsEnum) to (Waypoint), stops2:inmap (BusStops) to (Busstop), roads3:inmap (RoadNumber) to (Road), buses4:inmap (nat) to (Bus), central5:Busstop, inflow6:nat \u0026 (true \u003d\u003e (wp1 in set (dom wayspoints1)))))","legal map application obligation:(forall wp1:WaypointsEnum, wp2:WaypointsEnum, roadNmbr:RoadNumber, length:nat, highspeed:bool \u0026 (forall wayspoints1:inmap (WaypointsEnum) to (Waypoint), stops2:inmap (BusStops) to (Busstop), roads3:inmap (RoadNumber) to (Road), buses4:inmap (nat) to (Bus), central5:Busstop, inflow6:nat \u0026 (true \u003d\u003e (wp2 in set (dom wayspoints1)))))","operation call obligation:(forall wp1:WaypointsEnum, wp2:WaypointsEnum, roadNmbr:RoadNumber, length:nat, highspeed:bool \u0026 (forall wayspoints1:inmap (WaypointsEnum) to (Waypoint), stops2:inmap (BusStops) to (Busstop), roads3:inmap (RoadNumber) to (Road), buses4:inmap (nat) to (Bus), central5:Busstop, inflow6:nat \u0026 (true \u003d\u003e ((wayspoints(wp1) not in set (dom roads3)) and ((wayspoints(wp1) \u003c\u003e wayspoints(wp1)) and (forall r in set (rng roads) \u0026 (not (r.Covers)({wp1, wp2}))))))))","map compatible obligation:(forall wp1:Waypoint, wp2:Waypoint, roadNmbr:RoadNumber, length:nat, speedlimit:nat \u0026 (((roadNmbr not in set (dom roads)) and (forall r in set (rng roads) \u0026 ((not (r.Covers)({wp1, wp2})) and (wp1 \u003c\u003e wp2)))) \u003d\u003e (forall ldom1 in set (dom roads), rdom2 in set (dom {roadNmbr |-\u003e r}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (roads(ldom1) \u003d {roadNmbr |-\u003e r}(rdom2))))))","type compatibility obligation:(forall wp1:Waypoint, wp2:Waypoint, roadNmbr:RoadNumber, length:nat, speedlimit:nat \u0026 (((roadNmbr not in set (dom roads)) and (forall r in set (rng roads) \u0026 ((not (r.Covers)({wp1, wp2})) and (wp1 \u003c\u003e wp2)))) \u003d\u003e is_((roads munion {roadNmbr |-\u003e r}), inmap (RoadNumber) to (Road))))","legal sequence application obligation:(forall lineNumber:nat, route:seq of (RoadNumber) \u0026 ((((len route) \u003e 1) and (lineNumber not in set (dom buses))) \u003d\u003e (i in set (inds busRoads))))","non-empty sequence obligation:(forall lineNumber:nat, route:seq of (RoadNumber) \u0026 ((((len route) \u003e 1) and (lineNumber not in set (dom buses))) \u003d\u003e (([currentWP] ^ [currentWP]) \u003c\u003e [])))","legal sequence application obligation:(forall lineNumber:nat, route:seq of (RoadNumber) \u0026 ((((len route) \u003e 1) and (lineNumber not in set (dom buses))) \u003d\u003e ((len ([currentWP] ^ [currentWP])) in set (inds ([currentWP] ^ [currentWP])))))","map compatible obligation:(forall lineNumber:nat, route:seq of (RoadNumber) \u0026 ((((len route) \u003e 1) and (lineNumber not in set (dom buses))) \u003d\u003e (forall ldom1 in set (dom buses), rdom2 in set (dom {lineNumber |-\u003e bus}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (buses(ldom1) \u003d {lineNumber |-\u003e bus}(rdom2))))))","type compatibility obligation:(forall lineNumber:nat, route:seq of (RoadNumber) \u0026 ((((len route) \u003e 1) and (lineNumber not in set (dom buses))) \u003d\u003e is_((buses munion {lineNumber |-\u003e bus}), inmap (nat) to (Bus))))","type compatibility obligation:(forall lineNumber:nat, route:seq of (RoadNumber) \u0026 ((((len route) \u003e 1) and (lineNumber not in set (dom buses))) \u003d\u003e is_(RESULT, Bus)))","legal map application obligation:(forall route:seq of (RoadNumber) \u0026 (forall i in set (inds route) \u0026 (route(i) in set (dom roads))))","legal sequence application obligation:(forall route:seq of (RoadNumber) \u0026 (forall i in set (inds route) \u0026 (i in set (inds route))))","legal function application obligation:(forall filename:seq of (char) \u0026 pre_(((io.freadval))[InputTP]filename))","type compatibility obligation:(forall filename:seq of (char) \u0026 is_(input, seq of (inline)))","while loop termination obligation:...","non-empty sequence obligation:(inlines \u003c\u003e [])","type compatibility obligation:is_((event.t), real)","legal sequence application obligation:(true \u003d\u003e (true \u003d\u003e (forall i in set (inds wps) \u0026 (i in set (inds wps)))))","legal sequence application obligation:(true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (forall i in set (inds wps) \u0026 (i in set (inds wps)))))))","type compatibility obligation:(true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e is_((event.t), real)))))))","type compatibility obligation:(true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (forall city1:City, io2:IO, inlines3:seq of (inline), outlines4:seq of (char), busy5:bool, simulating6:bool, passengersTransported7:nat, passengersAnnoyed8:nat, passengersCount9:nat, passengersAnnoyedStops10:map (WaypointsEnum) to (nat) \u0026 (true \u003d\u003e is_((event.t), real)))))))))","type compatibility obligation:(true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (forall city1:City, io2:IO, inlines3:seq of (inline), outlines4:seq of (char), busy5:bool, simulating6:bool, passengersTransported7:nat, passengersAnnoyed8:nat, passengersCount9:nat, passengersAnnoyedStops10:map (WaypointsEnum) to (nat) \u0026 (true \u003d\u003e (true \u003d\u003e is_((event.t), real))))))))))","non-empty sequence obligation:(true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (forall city1:City, io2:IO, inlines3:seq of (inline), outlines4:seq of (char), busy5:bool, simulating6:bool, passengersTransported7:nat, passengersAnnoyed8:nat, passengersCount9:nat, passengersAnnoyedStops10:map (WaypointsEnum) to (nat) \u0026 (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (inlines3 \u003c\u003e []))))))))))))","legal map application obligation:(forall number:nat, goal:WaypointsEnum \u0026 (goal in set (dom (passengersAnnoyedStops ++ {goal |-\u003e number}))))","legal map application obligation:(true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (waypoint in set (dom passengersAnnoyedStops))))))))","operation call obligation:(forall text:seq of (char) \u0026 ((\"\" \u003d \"\") \u003c\u003d\u003e (\"\" \u003d nil)))","non-zero obligation:(forall a:real \u0026 ((a \u003c\u003e 0) \u003d\u003e (a \u003c\u003e 0)))"]