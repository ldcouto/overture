import org.overture.codegen.runtime.*;
import org.overture.codegen.runtime.traces.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry implements java.io.Serializable {
    private Number x;

    public Entry(final Number px) {
        cg_init_Entry_1(px);
    }

    public Entry() {
    }

    public void cg_init_Entry_1(final Number px) {
        x = px;
    }

    public Number op() {
        x = x.longValue() + 1L;

        return x;
    }

    public void Entry_T1_Run(final TestAccumulator testAccumulator) {
        final Store store = new Store();
        final IdGenerator gen = new IdGenerator();
        SequenceTraceNode sequence_1 = new SequenceTraceNode();
        AlternativeTraceNode alternatives_2 = new AlternativeTraceNode();
        VDMSet set_2 = SetUtil.set(new Entry(3L), new Entry(4L));

        for (Iterator iterator_2 = set_2.iterator(); iterator_2.hasNext();) {
            final Entry a = ((Entry) iterator_2.next());
            final Number ID_1 = gen.inc();

            store.register(ID_1, a);

            AlternativeTraceNode alternatives_3 = new AlternativeTraceNode();
            VDMSet set_1 = SetUtil.set(new Entry(5L), new Entry(6L));

            for (Iterator iterator_1 = set_1.iterator(); iterator_1.hasNext();) {
                final Entry b = ((Entry) iterator_1.next());
                final Number ID_2 = gen.inc();

                store.register(ID_2, b);

                SequenceTraceNode sequence_2 = new SequenceTraceNode();
                CallStatement callStm_1 = new CallStatement() {
                        public Object execute(final Object instance) {
                            return ((Entry) store.getValue(ID_1)).op();
                        }

                        public String toString() {
                            return "a.op()";
                        }
                    };

                StatementTraceNode apply_1 = new StatementTraceNode(callStm_1);

                CallStatement callStm_2 = new CallStatement() {
                        public Object execute(final Object instance) {
                            return ((Entry) store.getValue(ID_2)).op();
                        }

                        public String toString() {
                            return "b.op()";
                        }
                    };

                StatementTraceNode apply_2 = new StatementTraceNode(callStm_2);

                sequence_2.add(apply_1);
                sequence_2.add(apply_2);

                alternatives_3.add(sequence_2);
            }

            alternatives_2.add(alternatives_3);
        }

        sequence_1.add(alternatives_2);

        TraceNode.executeTests(sequence_1, Entry.class, testAccumulator, store);
    }

    public String toString() {
        return "Entry{" + "x := " + Utils.toString(x) + "}";
    }
}

##########
