import org.overture.codegen.runtime.*;
import org.overture.codegen.runtime.traces.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry implements java.io.Serializable {
    public Entry() {
    }

    private static Number fun(final Number a) {
        return a;
    }

    public void Entry_T1_Run(final TestAccumulator testAccumulator) {
        final Store store = new Store();
        final IdGenerator gen = new IdGenerator();
        SequenceTraceNode sequence_1 = new SequenceTraceNode();
        AlternativeTraceNode alternatives_2 = new AlternativeTraceNode();
        VDMSet set_1 = SetUtil.set(1L, 2L, 3L);

        for (Iterator iterator_1 = set_1.iterator(); iterator_1.hasNext();) {
            final Number a = ((Number) iterator_1.next());

            if (!(a.longValue() > 1L)) {
                continue;
            }

            final Number ID_1 = gen.inc();

            store.register(ID_1, a);

            CallStatement callStm_1 = new CallStatement() {
                    public Object execute(final Object instance) {
                        return fun(((Number) store.getValue(ID_1)));
                    }

                    public String toString() {
                        return "fun(" +
                        Utils.toString(((Number) store.getValue(ID_1))) + ")";
                    }
                };

            StatementTraceNode apply_1 = new StatementTraceNode(callStm_1);

            alternatives_2.add(apply_1);
        }

        sequence_1.add(alternatives_2);

        TraceNode.executeTests(sequence_1, Entry.class, testAccumulator, store);
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
