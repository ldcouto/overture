import org.overture.codegen.runtime.*;
import org.overture.codegen.runtime.traces.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry implements java.io.Serializable {
    private Number x = 1L;

    public Entry(final Number px) {
        cg_init_Entry_1(px);
    }

    public Entry() {
    }

    public void cg_init_Entry_1(final Number px) {
        x = px;
    }

    public Number op() {
        x = x.longValue() + 1L;

        return x;
    }

    public Number id(final Number a) {
        return a;
    }

    public void Entry_T1_Run(final TestAccumulator testAccumulator) {
        final Store store = new Store();
        final IdGenerator gen = new IdGenerator();
        SequenceTraceNode sequence_1 = new SequenceTraceNode();
        final Number ID_1 = gen.inc();
        final Number ID_2 = gen.inc();
        final Number ID_3 = gen.inc();

        {
            final Number x = op();
            final Number y = op();
            final Number z = op();
            store.register(ID_1, x);
            store.register(ID_2, y);
            store.register(ID_3, z);
        }

        SequenceTraceNode sequence_2 = new SequenceTraceNode();
        CallStatement callStm_1 = new CallStatement() {
                public Object execute(final Object instance) {
                    Number result_1 = ((Entry) instance).op();

                    return result_1;
                }

                public String toString() {
                    return "op()";
                }
            };

        StatementTraceNode apply_1 = new StatementTraceNode(callStm_1);

        CallStatement callStm_2 = new CallStatement() {
                public Object execute(final Object instance) {
                    Number result_2 = ((Entry) instance).id(((Number) store.getValue(
                                ID_3)));

                    return result_2;
                }

                public String toString() {
                    return "id(" +
                    Utils.toString(((Number) store.getValue(ID_3))) + ")";
                }
            };

        StatementTraceNode apply_2 = new StatementTraceNode(callStm_2);

        sequence_2.add(apply_1);
        sequence_2.add(apply_2);

        RepeatTraceNode repeat_1 = new RepeatTraceNode(sequence_2, 1L, 2L);

        sequence_1.add(repeat_1);

        TraceNode.executeTests(sequence_1, Entry.class, testAccumulator, store);
    }

    public String toString() {
        return "Entry{" + "x := " + Utils.toString(x) + "}";
    }
}

##########
