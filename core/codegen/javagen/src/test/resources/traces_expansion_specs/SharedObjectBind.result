import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class Counter implements java.io.Serializable {
    private Number n = 0L;

    public Counter() {
    }

    public Number inc() {
        n = n.longValue() + 1L;

        return n;
    }

    public String toString() {
        return "Counter{" + "n := " + Utils.toString(n) + "}";
    }
}

##########
import org.overture.codegen.runtime.*;
import org.overture.codegen.runtime.traces.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry implements java.io.Serializable {
    private Counter counter;

    public Entry(final Counter pC) {
        cg_init_Entry_1(pC);
    }

    public Entry() {
    }

    public void cg_init_Entry_1(final Counter pC) {
        counter = pC;
    }

    public Number inc() {
        return counter.inc();
    }

    public void Entry_T1_Run(final TestAccumulator testAccumulator) {
        final Store store = new Store();
        final IdGenerator gen = new IdGenerator();
        SequenceTraceNode sequence_1 = new SequenceTraceNode();
        final Number ID_1 = gen.inc();
        final Number ID_2 = gen.inc();
        final Number ID_3 = gen.inc();

        {
            final Counter c = new Counter();
            final Entry a1 = new Entry(c);
            final Entry a2 = new Entry(c);
            store.register(ID_1, c);
            store.register(ID_2, a1);
            store.register(ID_3, a2);
        }

        SequenceTraceNode sequence_2 = new SequenceTraceNode();
        CallStatement callStm_1 = new CallStatement() {
                public Object execute(final Object instance) {
                    return ((Entry) store.getValue(ID_2)).inc();
                }

                public String toString() {
                    return "a1.inc()";
                }
            };

        StatementTraceNode apply_1 = new StatementTraceNode(callStm_1);

        CallStatement callStm_2 = new CallStatement() {
                public Object execute(final Object instance) {
                    return ((Entry) store.getValue(ID_2)).inc();
                }

                public String toString() {
                    return "a1.inc()";
                }
            };

        StatementTraceNode apply_2 = new StatementTraceNode(callStm_2);

        CallStatement callStm_3 = new CallStatement() {
                public Object execute(final Object instance) {
                    return ((Entry) store.getValue(ID_3)).inc();
                }

                public String toString() {
                    return "a2.inc()";
                }
            };

        StatementTraceNode apply_3 = new StatementTraceNode(callStm_3);

        CallStatement callStm_4 = new CallStatement() {
                public Object execute(final Object instance) {
                    return ((Entry) store.getValue(ID_3)).inc();
                }

                public String toString() {
                    return "a2.inc()";
                }
            };

        StatementTraceNode apply_4 = new StatementTraceNode(callStm_4);

        sequence_2.add(apply_1);
        sequence_2.add(apply_2);
        sequence_2.add(apply_3);
        sequence_2.add(apply_4);

        RepeatTraceNode repeat_1 = new RepeatTraceNode(sequence_2, 1L, 2L);

        sequence_1.add(repeat_1);

        TraceNode.executeTests(sequence_1, Entry.class, testAccumulator, store);
    }

    public String toString() {
        return "Entry{" + "counter := " + Utils.toString(counter) + "}";
    }
}

##########
