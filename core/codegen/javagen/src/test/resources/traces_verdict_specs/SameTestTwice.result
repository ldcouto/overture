import org.overture.codegen.runtime.*;
import org.overture.codegen.runtime.traces.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry implements java.io.Serializable {
    private Number x;

    public Entry(final Number px) {
        cg_init_Entry_1(px);
    }

    public Entry() {
    }

    public void cg_init_Entry_1(final Number px) {
        x = px;
    }

    public Number op() {
        Entry e = null;

        if (Utils.equals(x, 4L)) {
            return e.op();
        }

        x = x.longValue() + 1L;

        return x;
    }

    public void Entry_T1_Run(final TestAccumulator testAccumulator) {
        final Store store = new Store();
        final IdGenerator gen = new IdGenerator();
        SequenceTraceNode sequence_1 = new SequenceTraceNode();
        final Number ID_1 = gen.inc();

        {
            final Entry a = new Entry(3L);
            store.register(ID_1, a);
        }

        SequenceTraceNode sequence_2 = new SequenceTraceNode();
        AlternativeTraceNode alternatives_2 = new AlternativeTraceNode();
        CallStatement callStm_1 = new CallStatement() {
                public Object execute(final Object instance) {
                    return ((Entry) store.getValue(ID_1)).op();
                }

                public String toString() {
                    return "a.op()";
                }
            };

        StatementTraceNode apply_1 = new StatementTraceNode(callStm_1);

        RepeatTraceNode repeat_1 = new RepeatTraceNode(apply_1, 1L, 2L);

        CallStatement callStm_2 = new CallStatement() {
                public Object execute(final Object instance) {
                    return ((Entry) store.getValue(ID_1)).op();
                }

                public String toString() {
                    return "a.op()";
                }
            };

        StatementTraceNode apply_2 = new StatementTraceNode(callStm_2);

        alternatives_2.add(repeat_1);
        alternatives_2.add(apply_2);

        sequence_2.add(alternatives_2);

        sequence_1.add(sequence_2);

        TraceNode.executeTests(sequence_1, Entry.class, testAccumulator, store);
    }

    public String toString() {
        return "Entry{" + "x := " + Utils.toString(x) + "}";
    }
}

##########
