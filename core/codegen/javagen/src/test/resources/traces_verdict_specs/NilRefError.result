import org.overture.codegen.runtime.*;
import org.overture.codegen.runtime.traces.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry implements java.io.Serializable {
    private Number x = 0L;

    public Entry() {
    }

    public Number op() {
        if (!(pre_op())) {
            throw new RuntimeException("Precondition failure: pre_op");
        }

        x = x.longValue() + 1L;

        if (Utils.equals(x, 3L)) {
            {
                Entry e = null;

                return e.x;
            }
        }

        return x;
    }

    private Boolean pre_op() {
        return x.longValue() < 1L;
    }

    public void Entry_T1_Run(final TestAccumulator testAccumulator) {
        final Store store = new Store();
        final IdGenerator gen = new IdGenerator();
        SequenceTraceNode sequence_1 = new SequenceTraceNode();
        CallStatement callStm_1 = new CallStatement() {
                public Object execute(final Object instance) {
                    Number result_1 = ((Entry) instance).op();

                    return result_1;
                }

                public String toString() {
                    return "op()";
                }
            };

        StatementTraceNode apply_1 = new StatementTraceNode(callStm_1);

        RepeatTraceNode repeat_1 = new RepeatTraceNode(apply_1, 1L, 3L);

        sequence_1.add(repeat_1);

        TraceNode.executeTests(sequence_1, Entry.class, testAccumulator, store);
    }

    public String toString() {
        return "Entry{" + "x := " + Utils.toString(x) + "}";
    }
}

##########
