import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry {
    public Entry() {
    }

    public static Object Run() {
        Func_1<Number, Number> f = new Func_1<Number, Number>() {
                public Number eval(final Number x) {
                    return x.longValue() + 1L;
                }
            };

        Func_1<Number, Number> g = new Func_1<Number, Number>() {
                public Number eval(final Number x) {
                    return x.longValue() + 2L;
                }
            };

        Func_1<Number, Number> h = func_compose(f).eval(g);

        return h.eval(2L);
    }

    private static Func_1<Func_1<Number, Number>, Func_1<Number, Number>> func_compose(
        final Func_1<Number, Number> f) {
        return new Func_1<Func_1<Number, Number>, Func_1<Number, Number>>() {
                public Func_1<Number, Number> eval(
                    final Func_1<Number, Number> g) {
                    return new Func_1<Number, Number>() {
                            public Number eval(final Number x) {
                                return g.eval(f.eval(x));
                            }
                        };
                }
            };
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
public interface Func_1<T_1, T_2> {
    public abstract T_2 eval(final T_1 param_1);
}

##########
