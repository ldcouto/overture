import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry {
    public Entry() {
    }

    public static Object Run() {
        VDMSeq xs = SeqUtil.seq(1L, 2L, 3L);
        Func_1<Number, Number> func = new Func_1<Number, Number>() {
                public Number eval(final Number x) {
                    return x.longValue() + 1L;
                }
            };

        return seq_map(Utils.copy(xs), func);
    }

    private static <A, B> VDMSeq seq_map(final VDMSeq s, final Func_1<A, B> f) {
        if (s.isEmpty()) {
            return SeqUtil.seq();
        } else {
            return SeqUtil.conc(SeqUtil.seq(f.eval(((A) s.get(0)))),
                seq_map(SeqUtil.tail(Utils.copy(s)), f));
        }
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
public interface Func_1<T_1, T_2> {
    public abstract T_2 eval(final T_1 param_1);
}

##########
