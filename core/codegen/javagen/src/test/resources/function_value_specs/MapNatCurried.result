import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry {
    public Entry() {
    }

    public static Object Run() {
        Func_1<Number, Number> f = new Func_1<Number, Number>() {
                public Number eval(final Number x) {
                    return x.longValue() * x.longValue();
                }
            };

        VDMSeq xs = SeqUtil.seq(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L);

        return nat_map(Utils.copy(xs)).eval(f);
    }

    public static Func_1<Func_1<Number, Number>, VDMSeq> nat_map(final VDMSeq s) {
        return new Func_1<Func_1<Number, Number>, VDMSeq>() {
                public VDMSeq eval(final Func_1<Number, Number> f) {
                    VDMSeq ternaryIfExp_1 = null;

                    if (s.isEmpty()) {
                        ternaryIfExp_1 = SeqUtil.seq();
                    } else {
                        ternaryIfExp_1 = SeqUtil.conc(SeqUtil.seq(f.eval(((Number) s.get(
                                            0)))),
                                nat_map(SeqUtil.tail(Utils.copy(s))).eval(f));
                    }

                    return Utils.copy(ternaryIfExp_1);
                }
            };
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
public interface Func_1<T_1, T_2> {
    public abstract T_2 eval(final T_1 param_1);
}

##########
