import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry {
    public Entry() {
    }

    public static Object Run() {
        Func_1<Number, Func_1<Number, Func_1<Number, Number>>> curryAdd = new Func_1<Number, Func_1<Number, Func_1<Number, Number>>>() {
                public Func_1<Number, Func_1<Number, Number>> eval(
                    final Number x0) {
                    return new Func_1<Number, Func_1<Number, Number>>() {
                            public Func_1<Number, Number> eval(final Number x1) {
                                return new Func_1<Number, Number>() {
                                        public Number eval(final Number x2) {
                                            return x0.longValue() +
                                            x1.longValue() + x2.longValue();
                                        }
                                    };
                            }
                        };
                }
            };

        return curryAdd.eval(1L).eval(2L).eval(3L);
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
public interface Func_1<T_1, T_2> {
    public abstract T_2 eval(final T_1 param_1);
}

##########
