import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class A {
    public A() {
    }

    public VDMSeq stringPatternOp(final VDMSeq stringPattern_1) {
        Boolean success_1 = Utils.equals(stringPattern_1,
                SeqUtil.seq('h', 'e', 'j'));

        if (!(success_1)) {
            throw new RuntimeException("String pattern match failed");
        }

        VDMSeq stringPattern_2 = SeqUtil.seq('h', 'e', 'j');
        Boolean success_2 = Utils.equals(stringPattern_2,
                SeqUtil.seq('h', 'e', 'j'));

        if (!(success_2)) {
            throw new RuntimeException("String pattern match failed");
        }

        return SeqUtil.seq('h', 'e', 'j');
    }

    public static VDMSeq stringPatternFun(final VDMSeq stringPattern_3) {
        Boolean success_3 = Utils.equals(stringPattern_3,
                SeqUtil.seq('h', 'e', 'j'));

        if (!(success_3)) {
            throw new RuntimeException("String pattern match failed");
        }

        VDMSeq stringPattern_4 = SeqUtil.seq('h', 'e', 'j');
        Boolean success_4 = Utils.equals(stringPattern_4,
                SeqUtil.seq('h', 'e', 'j'));

        if (!(success_4)) {
            throw new RuntimeException("String pattern match failed");
        }

        return SeqUtil.seq('h', 'e', 'j');
    }

    public String toString() {
        return "A{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry {
    public Entry() {
    }

    public static Object Run() {
        return SeqUtil.seq(new A().stringPatternOp(SeqUtil.seq('h', 'e', 'j')),
            A.stringPatternFun(SeqUtil.seq('h', 'e', 'j')));
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
