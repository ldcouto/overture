import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry {
    public Entry() {
    }

    public static Number casesInt(final Number n) {
        Number intPattern_1 = n;
        Boolean success_1 = Utils.equals(intPattern_1, 1L);

        if (!(success_1)) {
            Number intPattern_2 = n;
            success_1 = Utils.equals(intPattern_2, 2L);

            if (!(success_1)) {
                Number intPattern_3 = n;
                success_1 = Utils.equals(intPattern_3, 3L);

                if (!(success_1)) {
                    Number intPattern_4 = n;
                    success_1 = Utils.equals(intPattern_4, 4L);

                    if (!(success_1)) {
                        Number intPattern_5 = n;
                        success_1 = Utils.equals(intPattern_5, 5L);

                        if (!(success_1)) {
                            Number intPattern_6 = n;
                            success_1 = Utils.equals(intPattern_6, 6L);

                            if (!(success_1)) {
                                Number intPattern_7 = n;
                                success_1 = Utils.equals(intPattern_7, 7L);

                                if (!(success_1)) {
                                    Number intPattern_8 = n;
                                    success_1 = Utils.equals(intPattern_8, 8L);

                                    if (!(success_1)) {
                                        Number intPattern_9 = n;
                                        success_1 = Utils.equals(intPattern_9,
                                                9L);

                                        if (success_1) {
                                            return 3L;
                                        } else {
                                            return 999L;
                                        }
                                    } else {
                                        return 3L;
                                    }
                                } else {
                                    return 3L;
                                }
                            } else {
                                return 2L;
                            }
                        } else {
                            return 2L;
                        }
                    } else {
                        return 2L;
                    }
                } else {
                    return 1L;
                }
            } else {
                return 1L;
            }
        } else {
            return 1L;
        }
    }

    public static Object Run() {
        VDMSeq result = SeqUtil.seq();
        long toVar_1 = 10L;

        for (Long i = 1L; i <= toVar_1; i++) {
            result = SeqUtil.conc(Utils.copy(result), SeqUtil.seq(casesInt(i)));
        }

        return Utils.copy(result);
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
