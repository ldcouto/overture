import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class A {
    public A() {
    }

    public static VDMSeq recPatternFun() {
        Rec recordPattern_1 = new Rec(1L, true, 'a', 1.5,
                SeqUtil.seq('a', 'a', 'a'), null);
        Boolean success_1 = true;
        Number intPattern_1 = recordPattern_1.n;
        success_1 = Utils.equals(intPattern_1, 1L);

        if (success_1) {
            Boolean boolPattern_1 = recordPattern_1.b;
            success_1 = Utils.equals(boolPattern_1, true);

            if (success_1) {
                Character charPattern_1 = recordPattern_1.c;
                success_1 = Utils.equals(charPattern_1, 'a');

                if (success_1) {
                    Number realPattern_1 = recordPattern_1.r;
                    success_1 = Utils.equals(realPattern_1, 1.5);

                    if (success_1) {
                        VDMSeq stringPattern_1 = Utils.copy(recordPattern_1.s);
                        success_1 = Utils.equals(stringPattern_1,
                                SeqUtil.seq('a', 'a', 'a'));

                        if (success_1) {
                            Rec nullPattern_1 = Utils.copy(recordPattern_1.next);
                            success_1 = Utils.equals(nullPattern_1, null);
                        }
                    }
                }
            }
        }

        if (!(success_1)) {
            throw new RuntimeException("Record pattern match failed");
        }

        return SeqUtil.seq(2L, false, 'b', 2.1, SeqUtil.seq('b', 'b', 'b'), null);
    }

    public String toString() {
        return "A{}";
    }

    public static class Rec implements Record {
        public Number n;
        public Boolean b;
        public Character c;
        public Number r;
        public VDMSeq s;
        public Rec next;

        public Rec(final Number _n, final Boolean _b, final Character _c,
            final Number _r, final VDMSeq _s, final Rec _next) {
            n = _n;
            b = _b;
            c = _c;
            r = _r;
            s = (_s != null) ? Utils.copy(_s) : null;
            next = (_next != null) ? Utils.copy(_next) : null;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof Rec)) {
                return false;
            }

            Rec other = ((Rec) obj);

            return (Utils.equals(n, other.n)) && (Utils.equals(b, other.b)) &&
            (Utils.equals(c, other.c)) && (Utils.equals(r, other.r)) &&
            (Utils.equals(s, other.s)) && (Utils.equals(next, other.next));
        }

        public int hashCode() {
            return Utils.hashCode(n, b, c, r, s, next);
        }

        public Rec copy() {
            return new Rec(n, b, c, r, s, next);
        }

        public String toString() {
            return "mk_A`Rec" + Utils.formatFields(n, b, c, r, s, next);
        }
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry {
    public Entry() {
    }

    public static Object Run() {
        return A.recPatternFun();
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
