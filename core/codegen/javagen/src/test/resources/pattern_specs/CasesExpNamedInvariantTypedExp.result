import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry {
    public Entry() {
    }

    public static Object Run() {
        return SeqUtil.seq(f(Tuple.mk_(1L, 2L)), f(Tuple.mk_(true, false)),
            f(Tuple.mk_(5L, 5L)));
    }

    public static Number f(final Object t) {
        Number casesExpResult_1 = null;

        Tuple tuplePattern_1 = ((Tuple) t);
        Boolean success_1 = tuplePattern_1.compatible(Number.class, Number.class);

        if (success_1) {
            Number intPattern_1 = ((Number) tuplePattern_1.get(0));
            success_1 = Utils.equals(intPattern_1, 1L);

            if (success_1) {
                Number intPattern_2 = ((Number) tuplePattern_1.get(1));
                success_1 = Utils.equals(intPattern_2, 2L);
            }
        }

        if (!(success_1)) {
            Tuple tuplePattern_2 = ((Tuple) t);
            success_1 = tuplePattern_2.compatible(Boolean.class, Boolean.class);

            if (success_1) {
                Boolean boolPattern_1 = ((Boolean) tuplePattern_2.get(0));
                success_1 = Utils.equals(boolPattern_1, true);

                if (success_1) {
                    Boolean boolPattern_2 = ((Boolean) tuplePattern_2.get(1));
                    success_1 = Utils.equals(boolPattern_2, false);
                }
            }

            if (success_1) {
                casesExpResult_1 = 2L;
            } else {
                casesExpResult_1 = 3L;
            }
        } else {
            casesExpResult_1 = 1L;
        }

        return casesExpResult_1;
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
