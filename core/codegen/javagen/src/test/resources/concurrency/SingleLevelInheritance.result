import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class A extends VDMThread implements EvaluatePP {
    public volatile Number predA = 0L;
    public volatile Sentinel sentinel;

    public A() {
        sentinel = new A_sentinel(this);
    }

    public void opA() {
        sentinel.entering(((A_sentinel) sentinel).opA);

        try {
            //Skip;
        } finally {
            sentinel.leaving(((A_sentinel) sentinel).opA);
        }
    }

    public String toString() {
        return "A{" + "predA := " + Utils.toString(predA) + "}";
    }

    public Boolean evaluatePP(final Number fnr) {
        if (Utils.equals(fnr, 0L)) {
            return Utils.equals(predA, 0L);
        } else if (Utils.equals(fnr, 1L)) {
            return true;
        } else if (Utils.equals(fnr, 2L)) {
            return true;
        } else {
            return true;
        }
    }

    public static class A_sentinel extends Sentinel {
        public static final int opA = 0;
        public static final int A = 1;
        public static final int toString = 2;
        public final int function_sum = 3;

        public A_sentinel() {
        }

        public A_sentinel(final EvaluatePP instance) {
            init(instance, function_sum);
        }
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class B extends A implements EvaluatePP {
    public volatile Number predB = 1L;
    public volatile Sentinel sentinel;

    public B() {
        sentinel = new B_sentinel(this);
    }

    public void opB() {
        sentinel.entering(((B_sentinel) sentinel).opB);

        try {
            predA = 1L;
            sentinel.stateChanged();
        } finally {
            sentinel.leaving(((B_sentinel) sentinel).opB);
        }
    }

    public String toString() {
        return "B{" + "predB := " + Utils.toString(predB) + "}";
    }

    public Boolean evaluatePP(final Number fnr) {
        if (Utils.equals(fnr, 0L)) {
            return true;
        } else if (Utils.equals(fnr, 1L)) {
            return true;
        } else if (Utils.equals(fnr, 2L)) {
            return true;
        } else if (Utils.equals(fnr, 3L)) {
            return Utils.equals(predB, 1L);
        } else if (Utils.equals(fnr, 4L)) {
            return true;
        } else if (Utils.equals(fnr, 5L)) {
            return true;
        } else {
            return true;
        }
    }

    public void run() {
        opB();
        super.opA();
    }

    public static class B_sentinel extends A_sentinel {
        public static final int opB = 0;
        public static final int B = 1;
        public static final int toString = 2;
        public static final int opA = 3;
        public static final int A = 4;
        public final int function_sum = 5;

        public B_sentinel() {
        }

        public B_sentinel(final EvaluatePP instance) {
            init(instance, function_sum);
        }
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry implements EvaluatePP {
    public volatile Sentinel sentinel;

    public Entry() {
        sentinel = new Entry_sentinel(this);
    }

    public static Object Run() {
        A i1 = new A();
        B i2 = new B();
        i2.start();

        return i1.predA;
    }

    public String toString() {
        return "Entry{}";
    }

    public Boolean evaluatePP(final Number fnr) {
        if (Utils.equals(fnr, 0L)) {
            return true;
        } else if (Utils.equals(fnr, 1L)) {
            return true;
        } else if (Utils.equals(fnr, 2L)) {
            return true;
        } else {
            return true;
        }
    }

    public static class Entry_sentinel extends Sentinel {
        public static final int Run = 0;
        public static final int Entry = 1;
        public static final int toString = 2;
        public final int function_sum = 3;

        public Entry_sentinel() {
        }

        public Entry_sentinel(final EvaluatePP instance) {
            init(instance, function_sum);
        }
    }
}

##########
