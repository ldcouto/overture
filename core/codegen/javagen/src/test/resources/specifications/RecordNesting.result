import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class A {
    private static final R3 x = new R3(1L, new R2(new R1(2L)));
    private static final R3 y = Utils.copy(x);

    public A() {
    }

    public String toString() {
        return "A{" + "x = " + Utils.toString(x) + ", y = " +
        Utils.toString(y) + "}";
    }

    public static class R1 implements Record {
        public Number x;

        public R1(final Number _x) {
            x = _x;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof R1)) {
                return false;
            }

            R1 other = ((R1) obj);

            return Utils.equals(x, other.x);
        }

        public int hashCode() {
            return Utils.hashCode(x);
        }

        public R1 copy() {
            return new R1(x);
        }

        public String toString() {
            return "mk_A`R1" + Utils.formatFields(x);
        }
    }

    public static class R2 implements Record {
        public R1 r;

        public R2(final R1 _r) {
            r = (_r != null) ? Utils.copy(_r) : null;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof R2)) {
                return false;
            }

            R2 other = ((R2) obj);

            return Utils.equals(r, other.r);
        }

        public int hashCode() {
            return Utils.hashCode(r);
        }

        public R2 copy() {
            return new R2(r);
        }

        public String toString() {
            return "mk_A`R2" + Utils.formatFields(r);
        }
    }

    public static class R3 implements Record {
        public Number x;
        public R2 r;

        public R3(final Number _x, final R2 _r) {
            x = _x;
            r = (_r != null) ? Utils.copy(_r) : null;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof R3)) {
                return false;
            }

            R3 other = ((R3) obj);

            return (Utils.equals(x, other.x)) && (Utils.equals(r, other.r));
        }

        public int hashCode() {
            return Utils.hashCode(x, r);
        }

        public R3 copy() {
            return new R3(x, r);
        }

        public String toString() {
            return "mk_A`R3" + Utils.formatFields(x, r);
        }
    }
}

##########
