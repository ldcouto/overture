import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class A {
    public A() {
    }

    public Node op() {
        return new Node(1L,
            new Node(2L, new Node(3L, new Node(4L, new Node(5L, null)))));
    }

    public String toString() {
        return "A{}";
    }

    public static class Node implements Record {
        public Number e;
        public Node r;

        public Node(final Number _e, final Node _r) {
            e = _e;
            r = (_r != null) ? Utils.copy(_r) : null;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof Node)) {
                return false;
            }

            Node other = ((Node) obj);

            return (Utils.equals(e, other.e)) && (Utils.equals(r, other.r));
        }

        public int hashCode() {
            return Utils.hashCode(e, r);
        }

        public Node copy() {
            return new Node(e, r);
        }

        public String toString() {
            return "mk_A`Node" + Utils.formatFields(e, r);
        }
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry {
    public Entry() {
    }

    public static Object Run() {
        A.Node r = new A().op();

        return r.r.r.r.r.e;
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
