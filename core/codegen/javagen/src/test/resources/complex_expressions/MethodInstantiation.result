import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class A {
    public A() {
    }

    public static Number f1() {
        return g(1L, 2L);
    }

    public static A f2() {
        return g(new A(), 2L);
    }

    public static <T, U> T g(final T arg1, final U arg2) {
        return arg1;
    }

    public static Number go() {
        return f1().longValue() + f2().f1().longValue() +
        new A().f1().longValue() + g(1L, 'a').longValue();
    }

    public String toString() {
        return "A{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry {
    public Entry() {
    }

    public static Object Run() {
        return new A().go();
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
public interface Func_1<T_1> {
    public abstract T_1 eval();
}

##########
