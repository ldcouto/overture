import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry {
    public Entry() {
    }

    public static Object Run() {
        Boolean x1 = Utils.is_Tuple(Tuple.mk_(1L, 1L), Number.class,
                Boolean.class);
        Boolean x2 = Utils.is_Tuple(Tuple.mk_(1L, false), Number.class,
                Boolean.class);
        Boolean x3 = Utils.is_(Tuple.mk_(1L, 2L), Rec.class);

        Boolean x4 = Utils.is_(new Rec(5L, 5L), Rec.class);

        Boolean x5 = Utils.is_(new Entry(), Entry.class);

        Boolean x6 = Utils.is_(55L, Entry.class);

        return SeqUtil.seq(x1, x2, x3, x4, x5, x6);
    }

    public String toString() {
        return "Entry{}";
    }

    private static class Rec implements Record {
        public Number x;
        public Number y;

        public Rec(final Number _x, final Number _y) {
            x = _x;
            y = _y;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof Rec)) {
                return false;
            }

            Rec other = ((Rec) obj);

            return (Utils.equals(x, other.x)) && (Utils.equals(y, other.y));
        }

        public int hashCode() {
            return Utils.hashCode(x, y);
        }

        public Rec copy() {
            return new Rec(x, y);
        }

        public String toString() {
            return "mk_Entry`Rec" + Utils.formatFields(x, y);
        }
    }
}

##########
