import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry {
    public Entry() {
    }

    public static Object Run() {
        return op();
    }

    public static VDMMap op() {
        VDMMap mapCompResult_1 = MapUtil.map();
        VDMSet set_1 = SetUtil.set(Tuple.mk_(10L, 1L, 1L),
                Tuple.mk_(20L, 2L, 3L), Tuple.mk_(30L, 2L, 5L),
                Tuple.mk_(40L, 1L, 2L), Tuple.mk_(50L, 2L, 2L));

        for (Iterator iterator_1 = set_1.iterator(); iterator_1.hasNext();) {
            Tuple tuplePattern_1 = ((Tuple) iterator_1.next());
            Boolean success_1 = tuplePattern_1.compatible(Number.class,
                    Number.class, Number.class);
            Number a = null;

            if (success_1) {
                a = ((Number) tuplePattern_1.get(0));

                Number intPattern_1 = ((Number) tuplePattern_1.get(1));
                success_1 = Utils.equals(intPattern_1, 2L);
            }

            if (!(success_1)) {
                continue;
            }

            if (Utils.equals(1L, 1L)) {
                mapCompResult_1 = MapUtil.munion(Utils.copy(mapCompResult_1),
                        MapUtil.map(new Maplet(a, a)));
            }
        }

        return Utils.copy(mapCompResult_1);
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
