import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry {
    public Entry() {
    }

    public static Object Run() {
        return fun();
    }

    public static VDMSet fun() {
        VDMSet setCompResult_1 = SetUtil.set();
        VDMSet set_1 = SetUtil.set(Tuple.mk_(2L, Tuple.mk_(3L, 4L)),
                Tuple.mk_(1L, Tuple.mk_(2L, 10L)),
                Tuple.mk_(1L, Tuple.mk_(2L, 20L)),
                Tuple.mk_(1L, Tuple.mk_(3L, 4L)));

        for (Iterator iterator_1 = set_1.iterator(); iterator_1.hasNext();) {
            Tuple tuplePattern_1 = ((Tuple) iterator_1.next());
            Boolean success_1 = tuplePattern_1.compatible(Number.class,
                    Tuple.class);
            Number a = null;

            if (success_1) {
                Number intPattern_1 = ((Number) tuplePattern_1.get(0));
                success_1 = Utils.equals(intPattern_1, 1L);

                if (success_1) {
                    Tuple tuplePattern_2 = Utils.copy(((Tuple) tuplePattern_1.get(
                                1)));
                    success_1 = tuplePattern_2.compatible(Number.class,
                            Number.class);

                    if (success_1) {
                        Number intPattern_2 = ((Number) tuplePattern_2.get(0));
                        success_1 = Utils.equals(intPattern_2, 2L);

                        if (success_1) {
                            a = ((Number) tuplePattern_2.get(1));
                        }
                    }
                }
            }

            if (!(success_1)) {
                continue;
            }

            if (Utils.equals(1L, 1L)) {
                setCompResult_1 = SetUtil.union(Utils.copy(setCompResult_1),
                        SetUtil.set(a));
            }
        }

        return Utils.copy(setCompResult_1);
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
