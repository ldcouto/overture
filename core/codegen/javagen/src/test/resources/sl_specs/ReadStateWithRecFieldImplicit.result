import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry {
    private static St St = new St(new R(42L));

    public static Object Run() {
        return St.x.r;
    }

    public String toString() {
        return "Entry{" + "St := " + Utils.toString(St) + "}";
    }

    public static class R implements Record {
        public Number r;

        public R(final Number _r) {
            r = _r;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof R)) {
                return false;
            }

            R other = ((R) obj);

            return Utils.equals(r, other.r);
        }

        public int hashCode() {
            return Utils.hashCode(r);
        }

        public R copy() {
            return new R(r);
        }

        public String toString() {
            return "mk_Entry`R" + Utils.formatFields(r);
        }
    }

    public static class St implements Record {
        public R x;

        public St(final R _x) {
            x = (_x != null) ? Utils.copy(_x) : null;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof St)) {
                return false;
            }

            St other = ((St) obj);

            return Utils.equals(x, other.x);
        }

        public int hashCode() {
            return Utils.hashCode(x);
        }

        public St copy() {
            return new St(x);
        }

        public String toString() {
            return "mk_Entry`St" + Utils.formatFields(x);
        }
    }
}

##########
