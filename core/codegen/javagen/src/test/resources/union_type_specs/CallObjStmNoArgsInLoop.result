import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class A {
    public A() {
    }

    public void op() {
        //Skip;
    }

    public String toString() {
        return "A{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class B {
    public B() {
    }

    public void op() {
        //Skip;
    }

    public String toString() {
        return "B{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class C {
    public C() {
    }

    public void op() {
        //Skip;
    }

    public String toString() {
        return "C{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry {
    public Entry() {
    }

    public static Number Run() {
        VDMSet xs = SetUtil.set(new A(), new B(), new C());

        for (Iterator iterator_1 = xs.iterator(); iterator_1.hasNext();) {
            Object x = (Object) iterator_1.next();

            if (x instanceof A) {
                ((A) x).op();
            } else if (x instanceof B) {
                ((B) x).op();
            } else if (x instanceof C) {
                ((C) x).op();
            } else {
                throw new RuntimeException("Missing operation member: op");
            }
        }

        return 1L;
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
