import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class B {
    public Number x = 1L;

    public B() {
    }

    public String toString() {
        return "B{" + "x := " + Utils.toString(x) + "}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class A {
    public Number x = 1L;

    public A() {
    }

    public String toString() {
        return "A{" + "x := " + Utils.toString(x) + "}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry {
    private static VDMSeq hr = SeqUtil.seq(new A());

    public Entry() {
    }

    public static Object Run() {
        Object obj_1 = Utils.get(hr, hr.size());

        Number apply_1 = null;

        if (obj_1 instanceof A) {
            apply_1 = ((A) obj_1).x;
        } else if (obj_1 instanceof B) {
            apply_1 = ((B) obj_1).x;
        } else {
            throw new RuntimeException("Missing member: x");
        }

        return apply_1;
    }

    public String toString() {
        return "Entry{" + "hr := " + Utils.toString(hr) + "}";
    }
}

##########
