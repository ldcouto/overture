import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class A {
    public A() {
    }

    public Number op() {
        return 1L;
    }

    public String toString() {
        return "A{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class B {
    public B() {
    }

    public Number op() {
        return 2L;
    }

    public String toString() {
        return "B{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class C {
    public C() {
    }

    public Number op() {
        return 3L;
    }

    public String toString() {
        return "C{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry {
    private static final Object w = new B();

    public Entry() {
    }

    public static Number Run() {
        Entry e = new Entry();
        Object callStmObj_1 = e.w;

        if (callStmObj_1 instanceof A) {
            return ((A) callStmObj_1).op();
        } else if (callStmObj_1 instanceof B) {
            return ((B) callStmObj_1).op();
        } else if (callStmObj_1 instanceof C) {
            return ((C) callStmObj_1).op();
        } else {
            throw new RuntimeException("Missing operation member: op");
        }
    }

    public String toString() {
        return "Entry{" + "w = " + Utils.toString(w) + "}";
    }
}

##########
