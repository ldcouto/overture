import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class A {
    public A() {
    }

    public VDMSeq s() {
        return SeqUtil.seq();
    }

    public String toString() {
        return "A{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class B {
    public B() {
    }

    public VDMSeq s() {
        return SeqUtil.seq();
    }

    public String toString() {
        return "B{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry {
    public Entry() {
    }

    public static Number Run() {
        VDMSeq xs = SeqUtil.seq(new A(), new B());

        {
            Number counter = 0L;

            for (Iterator iterator_1 = SeqUtil.elems(Utils.copy(xs)).iterator();
                    iterator_1.hasNext();) {
                Object x = (Object) iterator_1.next();
                VDMSeq apply_1 = null;

                if (x instanceof A) {
                    apply_1 = ((A) x).s();
                } else if (x instanceof B) {
                    apply_1 = ((B) x).s();
                } else {
                    throw new RuntimeException("Missing member: s");
                }

                if (Utils.equals(apply_1.size(), 0L)) {
                    counter = counter.longValue() + 1L;
                }
            }

            return counter;
        }
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
