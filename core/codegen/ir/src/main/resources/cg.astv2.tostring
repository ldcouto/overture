To String Extensions

// import packages used by external $$ java code
import org.overture.ast.util.Utils;
import org.overture.ast.util.ToStringUtil;

%CG->#decl->method = [name]
%CG->#decl->class = [name]


//start

// patterns
%CG->#pattern->identifier = [name]
%CG->#pattern->ignore = "-" 
%CG->#pattern->bool = [value]
%CG->#pattern->char = [value]
%CG->#pattern->int = [value]
%CG->#pattern->null = "null"
%CG->#pattern->quote =  [value]
%CG->#pattern->real =  [value]
%CG->#pattern->string =  [value]
%CG->#pattern->tuple = "mk_(" + $Utils.listToString($[patterns]$)$ + ")"
%CG->#pattern->record = [typename] "_(" + $Utils.listToString($[patterns]$)$ + ")"

// binds
%CG->#bind->set = ""+ [pattern] + " in set " [set];


// multiple binds
%CG->multipleBind->set = ""+ $Utils.listToString($[patterns]$)$ + " in set " [set];


// names
%CG->name->type = [name]
%CG->name->token = [name] 

//end

// Object designator
%CG->#objectDesignator->identifier = [exp];
%CG->#objectDesignator->apply = [object] "(" + $Utils.listToString($[args]$)$ + ")"
%CG->#objectDesignator->field = [object]+"."+[fieldName]
%CG->#objectDesignator->new = "new "+[exp]
%CG->#objectDesignator->self = "self"

// State designators
%CG->#stateDesignator->identifier = [name]
%CG->#stateDesignator->field = [object] "." [field]
%CG->#stateDesignator->mapSeq = [mapseq] "(" + [exp] + ")"

// Types
//#basic
%CG->#type->#basic->char = "char"
%CG->#type->#basic->bool = "bool"
%CG->#type->#basic->token = "token"
// #basic->numeric
%CG->#type->#basic->#numeric->int = "int"
%CG->#type->#basic->#numeric->nat1 = "nat1"
%CG->#type->#basic->#numeric->nat = "nat"
%CG->#type->#basic->#numeric->rat = "rat"
%CG->#type->#basic->#numeric->real = "real" 

%CG->#type->Object = "Object"
%CG->#type->void = "void"
%CG->#type->class = [name]
%CG->#type->external = [name]
%CG->#type->record = [name]
%CG->#type->string = "String"
%CG->#type->template = [name]
%CG->#type->tuple = "" + $Utils.listToString("(",$ [types] $, " * ", ")")$
%CG->#type->method = "(" + $($[params]$.isEmpty() ? "()" : Utils.listToString($[params]$, " * ")) + " ==> "$ + [result] + ")"
//    |	#map
//    |	#set
//    |	#seq
//    |	#basicTypeWrappers
%CG->#type->error = "Error"
%CG->#type->interface = [name]
%CG->#type->union = "" +$Utils.listToString("(",$ [types] $, " | ", ")")$
%CG->#type->quote = "<" + [value] + ">"
%CG->#type->unknown = "Unknown"
    ;

// Vars
%CG->#exp->#Var->identifier = [name]
%CG->#exp->#Var->explicit = [name]
%CG->#exp->#Var->super = [name]


%CG->#exp->apply = [root] "(" + $Utils.listToString($[args]$)$ + ")"
%CG->#exp->field = [object] + "." + [memberName]
%CG->#exp->new = [name] "(" + $Utils.listToString($[args]$)$ + ")"
%CG->#exp->self = "self"
